if has('win32')
  set runtimepath+=~/.vim
endif

set backspace=indent,eol,start
set colorcolumn=+1
set encoding=utf8
set laststatus=2
set mouse=a
set nobackup
set nocompatible
set noshowmode
set noswapfile
set nowrap
set nowritebackup
set number
set numberwidth=3
set previewheight=5
set showtabline=2
set textwidth=1024

" tabs
set autoindent
set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=2

" whitespace characters
set listchars=space:·,tab:»\ ,trail:·
set list

" complete popup
set completeopt=menuone,popuphidden,noinsert,noselect
set completepopup=highlight:Pmenu,border:on,width:30,height:15

" syntax highlighting
syntax on
filetype plugin indent on

" gvim
if has('gui_running')
  set guifont=Iosevka:h11
  set guioptions-=e
  set lines=25
  set columns=100
  set renderoptions=type:directx
endif

" vim-plug
call plug#begin('~/.vim/plug-plugins')

" Show trailing whitespace
Plug 'bronson/vim-trailing-whitespace'

" Theme
Plug 'connorholyday/vim-snazzy'

" EditorConfig support
Plug 'editorconfig/editorconfig-vim'

" Custom statusline
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'

" Start screen
Plug 'mhinz/vim-startify'

" Language packs
Plug 'sheerun/vim-polyglot'

" Vim FZF integration
Plug 'junegunn/fzf', {'do': { -> fzf#install() }}
Plug 'junegunn/fzf.vim'

call plug#end()

autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif

" theme
try
  colorscheme snazzy
catch
endtry

" lightline
let g:lightline={}
let g:lightline.colorscheme='snazzy'
let g:lightline.enable={'statusline': 1, 'tabline': 1}
let g:lightline.tabline={'left': [['buffers']], 'right': [[]]}
let g:lightline.component_expand={'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type={'buffers': 'tabsel'}

" buffer keymaps
nnoremap <Tab>   :bn<CR>
nnoremap <S-Tab> :bp<CR>
nnoremap <C-c>   :bd<CR>

" window keymaps
nnoremap <Space> <C-w><C-w>
nnoremap <C-w>c  <C-w>c
nnoremap <C-w>h  :<C-u>split<CR>
nnoremap <C-w>v  :<C-u>vsplit<CR>

" write keymap
nnoremap <C-s> :w!<CR>

" fzf keymap
nnoremap <C-f> :FZF<CR>
