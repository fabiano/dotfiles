if has('win32')
  set runtimepath+=~/.vim
endif

set backspace=indent,eol,start
set colorcolumn=+1
set encoding=utf8
set laststatus=2
set nobackup
set nocompatible
set noshowmode
set noswapfile
set nowrap
set nowritebackup
set number
set numberwidth=3
set previewheight=5
set showtabline=2
set textwidth=1024

" tabs
set autoindent
set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=2

" whitespace characters
set listchars=space:·,tab:»\ ,trail:·
set list

" complete popup
set completeopt=menuone,popuphidden,noinsert,noselect
set completepopup=highlight:Pmenu,border:on,width:30,height:15

" syntax highlighting
syntax on
filetype plugin indent on

" gvim
if has('gui_running')
  set guifont=Iosevka:h11
  set guioptions-=e
  set lines=25
  set columns=100
  set renderoptions=type:directx
endif

" vim-plug
" https://github.com/junegunn/vim-plug
call plug#begin('~/.vim/plug-plugins')

Plug 'bronson/vim-trailing-whitespace'
Plug 'connorholyday/vim-snazzy'
Plug 'editorconfig/editorconfig-vim'
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'mhinz/vim-startify'

" Language packs
Plug 'sheerun/vim-polyglot'

" OmniSharp
Plug 'omnisharp/omnisharp-vim'

" OmniSharp code-actions
Plug 'nickspoons/vim-sharpenup'

" Vim FZF integration
Plug 'junegunn/fzf', {'do': { -> fzf#install() }}
Plug 'junegunn/fzf.vim'

" Linting/error highlighting
Plug 'dense-analysis/ale'

" Autocompletion
Plug 'prabirshrestha/asyncomplete.vim'

" Snippet support
Plug 'sirver/ultisnips'

" Debugger
Plug 'puremourning/vimspector'

call plug#end()

autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif

" theme
colorscheme snazzy

" lightline
let g:lightline={}
let g:lightline.colorscheme='snazzy'
let g:lightline.enable={'statusline': 1, 'tabline': 1}
let g:lightline.tabline={'left': [['buffers']], 'right': [[]]}
let g:lightline.component_expand={'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type={'buffers': 'tabsel'}

" asyncomplete
let g:asyncomplete_auto_popup=1
let g:asyncomplete_auto_completeopt=0

" sharpenup
let g:sharpenup_map_prefix='<Space>os'

" ultisnips
let g:UltiSnipsExpandTrigger = "<Enter>"
let g:UltiSnipsJumpForwardTrigger = "<C-n>"
let g:UltiSnipsJumpBackwardTrigger = "<C-p>"

" omnisharp
let g:OmniSharp_server_use_mono=0
let g:OmniSharp_server_use_net6=1
let g:OmniSharp_want_snippet=1
let g:OmniSharp_popup_position='peek'
let g:OmniSharp_popup_options={
\ 'highlight': 'Normal',
\ 'padding': [1],
\ 'border': [1],
\ 'borderchars': ['─', '│', '─', '│', '╭', '╮', '╯', '╰'],
\ 'borderhighlight': ['Special'],
\ 'maxwidth': 64,
\ 'maxheight': 16,
\}
let g:OmniSharp_selector_ui = 'fzf'

" remaps
nnoremap <Tab> :bn<CR>
nnoremap <S-Tab> :bp<CR>
nnoremap <C-F4> :bd<CR>
nnoremap <C-S> :w!<CR>
nnoremap <C-F> :FZF<CR>
nnoremap <C-\> <Plug>(omnisharp_code_actions)
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<CR>"
imap <C-@> <Plug>(asyncomplete_force_refresh)
